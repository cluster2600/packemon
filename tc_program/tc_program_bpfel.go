// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package tc_program

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTc_program returns the embedded CollectionSpec for tc_program.
func loadTc_program() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Tc_programBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tc_program: %w", err)
	}

	return spec, err
}

// loadTc_programObjects loads tc_program and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tc_programObjects
//	*tc_programPrograms
//	*tc_programMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTc_programObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTc_program()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tc_programSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_programSpecs struct {
	tc_programProgramSpecs
	tc_programMapSpecs
	tc_programVariableSpecs
}

// tc_programProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_programProgramSpecs struct {
	ControlEgress  *ebpf.ProgramSpec `ebpf:"control_egress"`
	ControlIngress *ebpf.ProgramSpec `ebpf:"control_ingress"`
}

// tc_programMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_programMapSpecs struct {
	PktEgressCount  *ebpf.MapSpec `ebpf:"pkt_egress_count"`
	PktIngressCount *ebpf.MapSpec `ebpf:"pkt_ingress_count"`
}

// tc_programVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_programVariableSpecs struct {
}

// tc_programObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTc_programObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_programObjects struct {
	tc_programPrograms
	tc_programMaps
	tc_programVariables
}

func (o *tc_programObjects) Close() error {
	return _Tc_programClose(
		&o.tc_programPrograms,
		&o.tc_programMaps,
	)
}

// tc_programMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTc_programObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_programMaps struct {
	PktEgressCount  *ebpf.Map `ebpf:"pkt_egress_count"`
	PktIngressCount *ebpf.Map `ebpf:"pkt_ingress_count"`
}

func (m *tc_programMaps) Close() error {
	return _Tc_programClose(
		m.PktEgressCount,
		m.PktIngressCount,
	)
}

// tc_programVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadTc_programObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_programVariables struct {
}

// tc_programPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTc_programObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_programPrograms struct {
	ControlEgress  *ebpf.Program `ebpf:"control_egress"`
	ControlIngress *ebpf.Program `ebpf:"control_ingress"`
}

func (p *tc_programPrograms) Close() error {
	return _Tc_programClose(
		p.ControlEgress,
		p.ControlIngress,
	)
}

func _Tc_programClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tc_program_bpfel.o
var _Tc_programBytes []byte
